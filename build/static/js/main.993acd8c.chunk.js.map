{"version":3,"sources":["main-page/logo.png","tvshow/Email.png","main-page/header.js","tvshow/Inquiry.js","tvshow/index.js","main-page/featured-tvshow.js","main-page/tvshow-filter.js","search-results/search-results-row.js","search-results/index.js","main-page/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","Header","props","className","src","logo","alt","subtitle","Inquiry","state","name","email","remarks","onNameChange","e","preventDefault","setState","target","value","onEmailChange","onRemarksChange","onSubmit","tvshow","htmlFor","type","placeholder","id","this","onChange","password","disabled","length","onClick","Component","inquiryShown","inquiryToggle","inquiry","photo","width","genre","status","seasons","rating","description","emailIcon","height","FeaturedTvshow","TvshowFilter","onSearchChange","filterTvshows","search","statuses","map","t","key","SearchResultsRow","setActiveTvshow","SearchResults","tvshowRows","filteredTvshows","toString","App","fetchTvshows","fetch","then","rsp","json","allTvshows","determineFeaturedTvshow","determineUniqeStatus","randomIndex","Math","floor","random","featuredTvshow","Array","from","Set","unshift","activeTvshow","filter","activeComponent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.993acd8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6b09800d.png\";","module.exports = __webpack_public_path__ + \"static/media/Email.9a8b0596.png\";","import React from 'react';\nimport logo from './logo.png';\n\nconst Header = (props) => (\n    <header className=\"row\">\n        <div className=\"col-md-5\">\n            <img src={logo} className=\"logo\" alt=\"logo\" />\n        </div>\n        <div className=\"col-md-7 mt-5 subtitle\">\n                {props.subtitle}\n        </div>\n    </header>\n);\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Inquiry extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    remarks: \"\"\n  }\n\n  onNameChange = (e) => {\n    e.preventDefault();\n    this.setState({ name: e.target.value });\n  }\n\n  onEmailChange = (e) => {\n    e.preventDefault();\n    this.setState({ email: e.target.value });\n  }\n\n  onRemarksChange = (e) => {\n    e.preventDefault();\n    this.setState({ remarks: e.target.value });\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    const tvshow = this.props.tvshow;\n    const contactInfo = this.state;\n    //send\n  }\n  render() {\n    return (\n      <form className=\"mt-2\">\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Name\"\n            id=\"name\"\n            value={this.state.name}\n            onChange={this.onNameChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            type=\"text\"\n            id=\"email\"\n            className=\"form-control\"\n            placeholder=\"Email\"\n            value={this.state.password}\n            onChange={this.onEmailChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"remarks\">Remarks</label>\n          <input\n            type=\"text\"\n            id=\"remarks\"\n            className=\"form-control\"\n            placeholder=\"Remarks\"\n            value={this.state.remarks}\n            onChange={this.onRemarksChange}\n          />\n        </div>\n        <button\n          className=\"btn btn-primary\"\n          disabled={this.state.name.length === 0 ||\n            this.state.email.length === 0}\n          onClick={this.onSubmit}\n        >\n          Submit\n      </button>\n      </form>\n    );\n  }\n}\n\nexport default Inquiry;\n","import React, { Component } from 'react';\nimport \"./tvshow.css\";\nimport emailIcon from './Email.png';\nimport Inquiry from './Inquiry';\n\nclass tvshow extends Component {\n    state = { inquiryShown: false }\n\n    inquiryToggle = () => {\n        this.setState({ inquiryShown: !this.state.inquiryShown })\n      }\n\n    render() {\n        const tvshow = this.props.tvshow;\n        const inquiry = this.state.inquiryShown ?\n            <Inquiry tvshow={tvshow} /> : null;\n        return (\n        <div>\n            <div className=\"row mt-2\">\n                <h3 className=\"col-md-12\">{tvshow.name}</h3>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-md-7\">\n                    <img src={tvshow.photo} width=\"100%\" alt=\"Tv Show\" />\n                </div>\n                <div className=\"col-md-5\">\n                    <p>Genre: {tvshow.genre}</p>\n                    <p>Status: {tvshow.status}</p>\n                    <p>Seasons: {tvshow.seasons}</p>\n\n                    <p className=\"rating\">{tvshow.rating}</p>\n                    <p>{tvshow.description}</p>\n                    <img className=\"email\" src={emailIcon} height=\"50\" alt=\"inquiry\"\n                        onClick={this.inquiryToggle} />\n                    {inquiry}\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default tvshow;\n","import React from 'react';\nimport Tvshow from '../tvshow';\n\nconst FeaturedTvshow = (props) => {\n    if (props.tvshow) return (\n        <div>\n            <div className=\"row featuredTvshow\">\n                <h3 className=\"col-md-12 text-center\">\n                    Featured TV show\n                </h3>\n            </div>\n            <Tvshow tvshow={props.tvshow} />\n        </div>)\n    return (<div>No featured TV show at this time</div>)\n}\n\nexport default FeaturedTvshow;\n","import React, { Component } from 'react';\n\nclass TvshowFilter extends Component {\n  state = {}\n\n  onSearchChange = (e) => {\n    const status = e.target.value;\n    this.props.filterTvshows(status);\n  }\n\n  render() {\n    const search = this.state.search;\n    const statuses = this.props.statuses || [];\n\n    return (\n      <div className=\"form-group row mt-3\">\n        <div className=\"offset-md-2 col-md-4\">\n          Look for a TV show by 'Ended'/'Not Ended' shows:\n        </div>\n        <div className=\"col-md-4\">\n          <select className=\"form-control\" value={search} onChange={this.onSearchChange}>\n            {statuses.map((t) => <option key={t} value={t}>{t}</option>)}\n          </select>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TvshowFilter;\n","import React from 'react';\n\nconst SearchResultsRow = (props) => {\n    const setActive = (e) => {\n        e.preventDefault();\n        props.setActiveTvshow(props.tvshow);\n    };\n\n    return <tr onClick={setActive}>\n        <td>{props.tvshow.name}</td>\n        <td>{props.tvshow.rating}</td>\n        <td>{props.tvshow.seasons}</td>\n    </tr>\n};\n\nexport default SearchResultsRow;\n","import React, { Component } from 'react';\nimport SearchResultsRow from './search-results-row';\n\nconst SearchResults = (props) => {\n  const tvshowRows = props.filteredTvshows.map(t =>\n    <SearchResultsRow key={t.id.toString()} tvshow={t}\n        setActiveTvshow={props.setActiveTvshow} />);\n  return (\n    <div className=\"mt-2\" >\n      <h4>Results for {props.status}:</h4>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <td>name</td>\n            <td>rating</td>\n            <td>seasons</td>\n          </tr>\n        </thead>\n        <tbody>\n          {tvshowRows}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SearchResults;\n","import React, { Component } from 'react';\n// import logo from './logo.png';\nimport './main-page.css';\nimport Header from './header';\nimport FeaturedTvshow from './featured-tvshow';\nimport TvshowFilter from './tvshow-filter';\nimport SearchResults from '../search-results';\nimport TvshowDetail from '../tvshow';\n\nclass App extends Component {\n  state = {}\n\n  componentDidMount() {\n    this.fetchTvshows();\n  }\n\n  fetchTvshows = () => {\n    fetch('/tvshows.json')\n    .then(rsp => rsp.json())\n    .then(allTvshows => {\n      this.allTvshows = allTvshows;\n      this.determineFeaturedTvshow();\n      this.determineUniqeStatus();\n    })\n  }\n\n  determineFeaturedTvshow = () => {\n    if (this.allTvshows) {\n      const randomIndex = Math.floor(Math.random() * this.allTvshows.length);\n      const featuredTvshow =  this.allTvshows[randomIndex];\n      this.setState({ featuredTvshow });\n    };\n  }\n\n  determineUniqeStatus = () => {\n    const statuses = this.allTvshows\n      ? Array.from(new Set(this.allTvshows.map(t => t.status)))\n      : [];\n      statuses.unshift(null);\n    this.setState({ statuses });\n  }\n\n  filterTvshows = (status) => {\n    this.setState({ activeTvshow: null });\n    const filteredTvshows = this.allTvshows.filter((t) => t.status === status);\n    this.setState({ filteredTvshows });\n    this.setState({ status });\n  }\n\n  setActiveTvshow = (tvshow) => {\n    this.setState({ activeTvshow: tvshow });\n  }\n\n  render() {\n    let activeComponent = null;\n    if (this.state.status)\n      activeComponent = <SearchResults status={this.state.status}\n      filteredTvshows={this.state.filteredTvshows} setActiveTvshow={this.setActiveTvshow} />;\n    if (this.state.activeTvshow)\n      activeComponent = <TvshowDetail tvshow={this.state.activeTvshow}/>;\n    if (!activeComponent)\n      activeComponent = <FeaturedTvshow tvshow={this.state.featuredTvshow} />;\n\n    return (\n      <div className=\"container\">\n        <Header subtitle=\"Popular TV Shows\"/>\n        <TvshowFilter statuses={this.state.statuses} filterTvshows={this.filterTvshows} />\n        {activeComponent}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main-page';\nimport registerServiceWorker from './registerServiceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}